3.1
(1) 123,231,321,213,132
(2) 4356已经出栈说明12已经入栈，1不能排在2前

3.9
void ditui(int n){
	if(n > 1){
		printf( n );
		ditui(n - 1);
	}
	return;
}

3.10
void test( int &sum ){
	typedef struct node{
		int value;
		struct node * next;
	}Node;

	Node *p, *L = NULL;
	do
	{
		p = new Node;
		std::cin >> p->value;
		p->next = L;
		L = p;
	} while(L->value);

	sum = 0;
	
	do{
		p = L;
		sum += p->value;
		std::cout << sum << std::endl;
		L = p->next;
		delete p;
	} while(L);
}

3.24
double g( double m, double n )
{
	if(m == 0) return 0;
	return g( m - 1, 2 * n ) + n;
}
m	n
5	2
4	4
3	8
2	16
1	32
0	64

3.28
typedef int Elemtype;
typedef int Status;

const Status OK = 1;
const Status ERROR = 0;
typedef struct Node{
	Elemtype value;
	struct Node * next;
}Node,*LinkList;

Status EnQueue( LinkList &L, Elemtype n )
{
	Node *p = new Node;
	p->value = n;
	p->next = L->next;
	L->next = p;
	return OK;
}

Status DeQueue( LinkList &L, Elemtype &n )
{
	LinkList q = L;
	LinkList p;
	for(p = L->next; p->next != L; p = p->next);
	p->next = L->next;
	L = p;
	n = q->value;
	delete q;
	return OK;
}

3.31
Status SymmetryString(char const *data)
{
	Queue Q;
	if(!QueueInit(Q)){
		return ERROR;
	}
	Stack S;
	StackInit(S);
	Elemtype q,s;
	for (char *i = data; *i != '\0'; ++i)
	{
		StackPush(S, *i);
		EnQueue(Q, *i);
	}
	while(!StackEmpty(S)){
		Pop(S ,s);
		DeQueue(Q ,q);
		if(s != q){
			return NOT;
		} 
	}
}